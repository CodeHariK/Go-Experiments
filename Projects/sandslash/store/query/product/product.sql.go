// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: product.sql

package product

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createProduct = `-- name: CreateProduct :one
INSERT INTO
    "products" (
        "product_name",
        "price",
        "category"
    )
VALUES ($1, $2, $3)
RETURNING
    "id"
`

type CreateProductParams struct {
	ProductName string         `json:"product_name"`
	Price       pgtype.Numeric `json:"price"`
	Category    string         `json:"category"`
}

func (q *Queries) CreateProduct(ctx context.Context, arg CreateProductParams) (int32, error) {
	row := q.db.QueryRow(ctx, createProduct, arg.ProductName, arg.Price, arg.Category)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const deleteProduct = `-- name: DeleteProduct :exec
DELETE FROM "products" WHERE "id" = $1
`

func (q *Queries) DeleteProduct(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteProduct, id)
	return err
}

const getProductByID = `-- name: GetProductByID :one
SELECT
    "id",
    "product_name",
    "price",
    "category"
FROM "products"
WHERE
    "id" = $1
`

func (q *Queries) GetProductByID(ctx context.Context, id int32) (Product, error) {
	row := q.db.QueryRow(ctx, getProductByID, id)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.ProductName,
		&i.Price,
		&i.Category,
	)
	return i, err
}

const listProducts = `-- name: ListProducts :many
SELECT
    "id",
    "product_name",
    "price",
    "category"
FROM "products"
`

func (q *Queries) ListProducts(ctx context.Context) ([]Product, error) {
	rows, err := q.db.Query(ctx, listProducts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Product{}
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.ProductName,
			&i.Price,
			&i.Category,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProduct = `-- name: UpdateProduct :one
UPDATE "products"
SET
    "product_name" = COALESCE($2, "product_name"),
    "price" = COALESCE($3, "price"),
    "category" = COALESCE($4, "category")
WHERE
    "id" = $1
RETURNING
    "id",
    "product_name",
    "price",
    "category"
`

type UpdateProductParams struct {
	ID          int32          `json:"id"`
	ProductName string         `json:"product_name"`
	Price       pgtype.Numeric `json:"price"`
	Category    string         `json:"category"`
}

func (q *Queries) UpdateProduct(ctx context.Context, arg UpdateProductParams) (Product, error) {
	row := q.db.QueryRow(ctx, updateProduct,
		arg.ID,
		arg.ProductName,
		arg.Price,
		arg.Category,
	)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.ProductName,
		&i.Price,
		&i.Category,
	)
	return i, err
}
