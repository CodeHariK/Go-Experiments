// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: user.sql

package user

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO
    "users" (
        "username",
        "email",
        "is_admin",
        "date_of_birth",
        "phone_number",
        "last_login",
        "location"
    )
VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING
    "id",
    "username",
    "email",
    "is_admin",
    "created_at",
    "date_of_birth",
    "updated_at",
    "phone_number",
    "last_login",
    "location"
`

type CreateUserParams struct {
	Username    string           `json:"username"`
	Email       string           `json:"email"`
	IsAdmin     pgtype.Bool      `json:"is_admin"`
	DateOfBirth pgtype.Date      `json:"date_of_birth"`
	PhoneNumber string           `json:"phone_number"`
	LastLogin   pgtype.Timestamp `json:"last_login"`
	Location    pgtype.Int4      `json:"location"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Username,
		arg.Email,
		arg.IsAdmin,
		arg.DateOfBirth,
		arg.PhoneNumber,
		arg.LastLogin,
		arg.Location,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.IsAdmin,
		&i.CreatedAt,
		&i.DateOfBirth,
		&i.UpdatedAt,
		&i.PhoneNumber,
		&i.LastLogin,
		&i.Location,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :one
DELETE FROM "users" WHERE "id" = $1 RETURNING "id"
`

func (q *Queries) DeleteUser(ctx context.Context, id int32) (int32, error) {
	row := q.db.QueryRow(ctx, deleteUser, id)
	err := row.Scan(&id)
	return id, err
}

const findUserByUsername = `-- name: FindUserByUsername :one
SELECT
    "id",
    "username",
    "email",
    "is_admin",
    "created_at",
    "date_of_birth",
    "updated_at",
    "phone_number",
    "last_login",
    "location"
FROM "users"
WHERE
    "username" = $1
`

func (q *Queries) FindUserByUsername(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRow(ctx, findUserByUsername, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.IsAdmin,
		&i.CreatedAt,
		&i.DateOfBirth,
		&i.UpdatedAt,
		&i.PhoneNumber,
		&i.LastLogin,
		&i.Location,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT
    "id",
    "username",
    "email",
    "is_admin",
    "created_at",
    "date_of_birth",
    "updated_at",
    "phone_number",
    "last_login",
    "location"
FROM "users"
WHERE
    "id" = $1
`

func (q *Queries) GetUserByID(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRow(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.IsAdmin,
		&i.CreatedAt,
		&i.DateOfBirth,
		&i.UpdatedAt,
		&i.PhoneNumber,
		&i.LastLogin,
		&i.Location,
	)
	return i, err
}

const listAllUsers = `-- name: ListAllUsers :many
SELECT
    "id",
    "username",
    "email",
    "is_admin",
    "created_at",
    "date_of_birth",
    "updated_at",
    "phone_number",
    "last_login",
    "location"
FROM "users"
ORDER BY "created_at" DESC
`

func (q *Queries) ListAllUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.Query(ctx, listAllUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Email,
			&i.IsAdmin,
			&i.CreatedAt,
			&i.DateOfBirth,
			&i.UpdatedAt,
			&i.PhoneNumber,
			&i.LastLogin,
			&i.Location,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :one
UPDATE "users"
SET
    "username" = $1,
    "email" = $2,
    "is_admin" = $3,
    "date_of_birth" = $4,
    "phone_number" = $5,
    "last_login" = $6,
    "location" = $7,
    "updated_at" = CURRENT_TIMESTAMP
WHERE
    "id" = $8
RETURNING
    "id",
    "username",
    "email",
    "is_admin",
    "created_at",
    "date_of_birth",
    "updated_at",
    "phone_number",
    "last_login",
    "location"
`

type UpdateUserParams struct {
	Username    string           `json:"username"`
	Email       string           `json:"email"`
	IsAdmin     pgtype.Bool      `json:"is_admin"`
	DateOfBirth pgtype.Date      `json:"date_of_birth"`
	PhoneNumber string           `json:"phone_number"`
	LastLogin   pgtype.Timestamp `json:"last_login"`
	Location    pgtype.Int4      `json:"location"`
	ID          int32            `json:"id"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.Username,
		arg.Email,
		arg.IsAdmin,
		arg.DateOfBirth,
		arg.PhoneNumber,
		arg.LastLogin,
		arg.Location,
		arg.ID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.IsAdmin,
		&i.CreatedAt,
		&i.DateOfBirth,
		&i.UpdatedAt,
		&i.PhoneNumber,
		&i.LastLogin,
		&i.Location,
	)
	return i, err
}
