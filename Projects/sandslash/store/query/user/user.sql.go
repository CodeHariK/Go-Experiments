// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: user.sql

package user

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO
    "users" (
        "username",
        "email",
        "is_admin",
        "created_at",
        "date_of_birth",
        "updated_at",
        "phone_number",
        "last_login",
        "location_id"
    )
VALUES (
        $1,
        $2,
        $3,
        $4,
        $5,
        $6,
        $7,
        $8,
        $9
    )
RETURNING
    "id"
`

type CreateUserParams struct {
	Username    string           `json:"username"`
	Email       string           `json:"email"`
	IsAdmin     pgtype.Bool      `json:"is_admin"`
	CreatedAt   pgtype.Timestamp `json:"created_at"`
	DateOfBirth pgtype.Date      `json:"date_of_birth"`
	UpdatedAt   pgtype.Timestamp `json:"updated_at"`
	PhoneNumber string           `json:"phone_number"`
	LastLogin   pgtype.Timestamp `json:"last_login"`
	LocationID  pgtype.Int4      `json:"location_id"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (int32, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Username,
		arg.Email,
		arg.IsAdmin,
		arg.CreatedAt,
		arg.DateOfBirth,
		arg.UpdatedAt,
		arg.PhoneNumber,
		arg.LastLogin,
		arg.LocationID,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM "users" WHERE "id" = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const getUserByID = `-- name: GetUserByID :one
SELECT
    "id",
    "username",
    "email",
    "is_admin",
    "created_at",
    "date_of_birth",
    "updated_at",
    "phone_number",
    "last_login",
    "location_id"
FROM "users"
WHERE
    "id" = $1
`

func (q *Queries) GetUserByID(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRow(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.IsAdmin,
		&i.CreatedAt,
		&i.DateOfBirth,
		&i.UpdatedAt,
		&i.PhoneNumber,
		&i.LastLogin,
		&i.LocationID,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT
    "id",
    "username",
    "email",
    "is_admin",
    "created_at",
    "date_of_birth",
    "updated_at",
    "phone_number",
    "last_login",
    "location_id"
FROM "users"
`

func (q *Queries) ListUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.Query(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Email,
			&i.IsAdmin,
			&i.CreatedAt,
			&i.DateOfBirth,
			&i.UpdatedAt,
			&i.PhoneNumber,
			&i.LastLogin,
			&i.LocationID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :one
UPDATE "users"
SET
    "username" = COALESCE($2, "username"),
    "email" = COALESCE($3, "email"),
    "is_admin" = COALESCE($4, "is_admin"),
    "created_at" = COALESCE($5, "created_at"),
    "date_of_birth" = COALESCE($6, "date_of_birth"),
    "updated_at" = COALESCE($7, "updated_at"),
    "phone_number" = COALESCE($8, "phone_number"),
    "last_login" = COALESCE($9, "last_login"),
    "location_id" = COALESCE($10, "location_id")
WHERE
    "id" = $1
RETURNING
    "id",
    "username",
    "email",
    "is_admin",
    "created_at",
    "date_of_birth",
    "updated_at",
    "phone_number",
    "last_login",
    "location_id"
`

type UpdateUserParams struct {
	ID          int32            `json:"id"`
	Username    string           `json:"username"`
	Email       string           `json:"email"`
	IsAdmin     pgtype.Bool      `json:"is_admin"`
	CreatedAt   pgtype.Timestamp `json:"created_at"`
	DateOfBirth pgtype.Date      `json:"date_of_birth"`
	UpdatedAt   pgtype.Timestamp `json:"updated_at"`
	PhoneNumber string           `json:"phone_number"`
	LastLogin   pgtype.Timestamp `json:"last_login"`
	LocationID  pgtype.Int4      `json:"location_id"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.ID,
		arg.Username,
		arg.Email,
		arg.IsAdmin,
		arg.CreatedAt,
		arg.DateOfBirth,
		arg.UpdatedAt,
		arg.PhoneNumber,
		arg.LastLogin,
		arg.LocationID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.IsAdmin,
		&i.CreatedAt,
		&i.DateOfBirth,
		&i.UpdatedAt,
		&i.PhoneNumber,
		&i.LastLogin,
		&i.LocationID,
	)
	return i, err
}
