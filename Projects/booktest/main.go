// Code generated by sqlc-connect (https://github.com/walterwanderley/sqlc-connect).

package main

import (
	"context"
	"database/sql"
	_ "embed"
	"fmt"
	"log/slog"
	"net/http"
	"os"
	"os/signal"
	"runtime"
	"syscall"
	"time"

	"connectrpc.com/connect"
	"connectrpc.com/otelconnect"
	"github.com/XSAM/otelsql"
	"github.com/flowchartsman/swaggerui"
	"github.com/prometheus/client_golang/prometheus/promhttp"
	semconv "go.opentelemetry.io/otel/semconv/v1.23.0"
	"go.uber.org/automaxprocs/maxprocs"
	"golang.org/x/net/http2"
	"golang.org/x/net/http2/h2c"

	// database driver
	_ "github.com/jackc/pgx/v5/stdlib"

	"booktest/internal/server/instrumentation/metric"
	"booktest/internal/server/instrumentation/trace"
)

//go:generate sqlc-connect -m booktest -tracing -metric -append

const serviceName = "booktest"

var port = 8080
var (
	dbURL string

	otlpEndpoint string

	//go:embed api/apidocs.swagger.json
	openAPISpec []byte
)

func main() {
	dbURL = os.Getenv("db_url")
	otlpEndpoint = os.Getenv("otlp_endpoint")
	dev := os.Getenv("dev")

	initLogger(dev)

	run()
}

func run() {
	_, err := maxprocs.Set()
	if err != nil {
		slog.Warn("startup", "error", err)
	}
	slog.Info("startup", "GOMAXPROCS", runtime.GOMAXPROCS(0))

	var db *sql.DB
	if otlpEndpoint != "" {

		db, err = otelsql.Open("pgx", dbURL, otelsql.WithAttributes(
			semconv.DBSystemPostgreSQL,
		))
		if err != nil {
			fmt.Println(err)
		}

		err = otelsql.RegisterDBStatsMetrics(db, otelsql.WithAttributes(
			semconv.DBSystemPostgreSQL,
		))
		if err != nil {
			fmt.Println(err)
		}
	} else {

		db, err = sql.Open("pgx", dbURL)
		if err != nil {
			fmt.Println(err)
		}
	}
	defer db.Close()

	fmt.Println("----------------")
	fmt.Println(dbURL)
	err = db.Ping()
	fmt.Println(err)
	fmt.Println("----------------")

	mux := http.NewServeMux()

	if otlpEndpoint != "" {
		var interceptors []connect.Interceptor

		observability, err := otelconnect.NewInterceptor()
		if err != nil {
			fmt.Println(err)
		}
		interceptors = append(interceptors, observability)
		registerHandlers(mux, db, interceptors)
	}
	fmt.Println("----------------")
	mux.Handle("/swagger/", http.StripPrefix("/swagger", swaggerui.Handler(openAPISpec)))

	mux.Handle("/metrics", promhttp.Handler())
	fmt.Println("----------------")
	server := &http.Server{
		Addr:    fmt.Sprintf(":%d", port),
		Handler: h2c.NewHandler(mux, &http2.Server{}),
		// Please, configure timeouts!
	}

	err = metric.Init(serviceName)
	if err != nil {
		fmt.Println(err)
	}
	fmt.Println("----------------")
	shutdown, err := trace.Init(context.Background(), serviceName, otlpEndpoint)
	if err != nil {
		fmt.Println(err)
	}
	defer shutdown()
	fmt.Println("----------------")
	done := make(chan os.Signal, 1)
	signal.Notify(done, os.Interrupt, syscall.SIGINT, syscall.SIGTERM)
	go func() {
		sig := <-done
		slog.Warn("signal detected...", "signal", sig)
		ctx, cancel := context.WithTimeout(context.Background(), 15*time.Second)
		defer cancel()
		server.Shutdown(ctx)
	}()
	slog.Info("Listening...", "port", port)
	server.ListenAndServe()
}

func initLogger(dev string) {
	var handler slog.Handler
	opts := slog.HandlerOptions{
		AddSource: true,
	}
	switch {
	case dev == "true":
		handler = slog.NewTextHandler(os.Stderr, &opts)
	default:
		handler = slog.NewJSONHandler(os.Stderr, &opts)
	}

	logger := slog.New(handler)
	slog.SetDefault(logger)
}
